"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Progress } from "@/components/ui/progress";
import { Plus, Sparkles, Bot, Database, FileText } from "lucide-react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { DisplayText } from "@/components/global/display-text";
import { useMutation, useQuery } from "@tanstack/react-query";
import { client } from "@/lib/client";
import { useUser } from "@clerk/nextjs";
import { cn } from "@/lib/utils";

const createRoomSchema = z.object({
  name: z.string().min(1, "Room name is required").max(100, "Name too long"),
  description: z
    .string()
    .min(10, "Description must be at least 10 characters")
    .max(500, "Description too long"),
  jobType: z.enum(["Full-time", "Part-time", "Internship", "Placement"]),
  company: z
    .string()
    .min(1, "Company name is required")
    .max(100, "Company name too long"),
  position: z
    .string()
    .min(1, "Position is required")
    .max(100, "Position too long"),
  requirements: z.string().optional(),
});

type CreateRoomForm = z.infer<typeof createRoomSchema>;

interface CreateRoomDialogProps {
  triggerClassName?: string;
  showDialog?: boolean;
  isMinimal?: boolean;
}

type CreationStep = {
  id: string;
  label: string;
  description: string;
  icon: React.ElementType;
  completed: boolean;
  active: boolean;
};

export function CreateRoomDialog({
  triggerClassName,
  showDialog,
  isMinimal = false,
}: CreateRoomDialogProps) {
  const [open, setOpen] = useState(showDialog || false);
  const [isCreating, setIsCreating] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  const [progress, setProgress] = useState(0);
  const { user } = useUser();

  const { refetch: refetchUser } = useQuery({
    queryKey: ["userData"],
    queryFn: async () => {
      if (!user) return null;
      const userData = await client.user.getDbUser.$get({ clerkId: user.id });
      return await userData.json();
    },
    enabled: false,
  });

  const { mutateAsync } = useMutation({
    mutationFn: async (data: CreateRoomForm) => {
      const { data: temp } = await refetchUser();
      if (!temp) {
        throw new Error("User data not found");
      }

      // description and prompt will be generated by AI later

      const res = await client.room.create.$post({
        name: data.name,
        description: "",
        originalJSON: data,
        prompt: "",
        userId: temp.id,
        jobId: 0,
      });

      return await res.json();
    },
  });

  const creationSteps: CreationStep[] = [
    {
      id: "processing",
      label: "Processing Requirements",
      description: "Analyzing job description and requirements",
      icon: FileText,
      completed: currentStep > 0,
      active: currentStep === 0,
    },
    {
      id: "ai-generation",
      label: "AI Prompt Generation",
      description: "Creating personalized interview questions",
      icon: Bot,
      completed: currentStep > 1,
      active: currentStep === 1,
    },
    {
      id: "database",
      label: "Saving to Database",
      description: "Storing room data and configurations",
      icon: Database,
      completed: currentStep > 2,
      active: currentStep === 2,
    },
    {
      id: "finalizing",
      label: "Finalizing Room",
      description: "Setting up your practice environment",
      icon: Sparkles,
      completed: currentStep > 3,
      active: currentStep === 3,
    },
  ];

  const form = useForm<CreateRoomForm>({
    resolver: zodResolver(createRoomSchema),
    defaultValues: {
      name: "Testing",
      description: "Testing Testing",
      jobType: "Full-time",
      company: "Testing ",
      position: "Testing",
      requirements: "Testing",
    },
  });

  const onSubmit = async (data: CreateRoomForm) => {
    try {
      setIsCreating(true);
      setCurrentStep(0);
      setProgress(0);

      // Step 1: Processing Requirements
      setCurrentStep(0);
      setProgress(25);
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Step 2: AI Prompt Generation
      setCurrentStep(1);
      setProgress(50);
      await new Promise((resolve) => setTimeout(resolve, 2000));

      // Step 3: Saving to Database (this is where the actual mutation happens)
      setCurrentStep(2);
      setProgress(75);

      // Execute the actual room creation mutation
      await mutateAsync(data);

      await new Promise((resolve) => setTimeout(resolve, 1500));

      // Step 4: Finalizing Room
      setCurrentStep(3);
      setProgress(100);
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Small delay to show completion
      await new Promise((resolve) => setTimeout(resolve, 500));

      form.reset();
      setOpen(false);
    } catch (error) {
      console.error("Failed to create room:", error);
      // Reset the progress on error
      setIsCreating(false);
      setCurrentStep(0);
      setProgress(0);
    } finally {
      setIsCreating(false);
      setCurrentStep(0);
      setProgress(0);
    }
  };

  useEffect(() => {
    if (showDialog) {
      setOpen(true);
    }
  }, [showDialog]);

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button
          size={isMinimal ? "icon" : "default"}
          className={cn(
            "bg-card border border-primary/25 hover:bg-primary/50 hover:border-primary/80 text-white cursor-pointer",
            triggerClassName
          )}
        >
          <Plus className="h-4 w-4" />
          {!isMinimal && <p className="ml-2">Create Practice Room</p>}
        </Button>
      </DialogTrigger>
      <DialogContent className="md:min-w-[600px] bg-background/90 backdrop-blur-xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Sparkles className="h-5 w-5 text-primary" />
            <DisplayText className="text-xl">
              {isCreating
                ? "Creating Your Room..."
                : "Create New Practice Room"}
            </DisplayText>
          </DialogTitle>
          <DialogDescription>
            {isCreating
              ? "Please wait while we set up your personalized interview practice room."
              : "Fill in the details below to create a new interview practice room. A personalized room will be generated according to your needs."}
          </DialogDescription>
        </DialogHeader>

        {isCreating ? (
          // Progress UI
          <div className="space-y-6 py-4">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">Progress</span>
                <span className="font-medium">{progress}%</span>
              </div>
              <Progress value={progress} className="h-2" />
            </div>

            <div className="space-y-4">
              {(() => {
                const currentActiveStep = creationSteps[currentStep];
                if (!currentActiveStep) return null;

                const IconComponent = currentActiveStep.icon;

                return (
                  <div className="flex items-center gap-3 p-3 rounded-lg border bg-primary/5 border-primary/20">
                    <div className="flex items-center justify-center w-8 h-8 rounded-full bg-primary text-white animate-pulse">
                      <IconComponent className="w-4 h-4 animate-spin" />
                    </div>

                    <div className="flex-1">
                      <h4 className="font-medium text-primary">
                        {currentActiveStep.label}
                      </h4>
                      <p className="text-sm text-muted-foreground">
                        {currentActiveStep.description}
                      </p>
                    </div>

                    <div className="text-xs text-muted-foreground">
                      {currentStep + 1}/{creationSteps.length}
                    </div>
                  </div>
                );
              })()}
            </div>
          </div>
        ) : (
          // Form UI
          <Form {...form}>
            <form
              onSubmit={form.handleSubmit(onSubmit)}
              className="space-y-4 mt-4 w-full"
            >
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Room Name</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="e.g., Frontend Developer Practice"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="flex w-full flex-col md:flex-row gap-2">
                <FormField
                  control={form.control}
                  name="company"
                  render={({ field }) => (
                    <FormItem className="w-full">
                      <FormLabel>Company</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., Google, Meta" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="position"
                  render={({ field }) => (
                    <FormItem className="w-full">
                      <FormLabel>Position</FormLabel>
                      <FormControl>
                        <Input
                          placeholder="e.g., Software Engineer"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="jobType"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Job Type</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select job type" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="Full-time">Full-time</SelectItem>
                          <SelectItem value="Part-time">Part-time</SelectItem>
                          <SelectItem value="Internship">Internship</SelectItem>
                          <SelectItem value="Placement">Placement</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Job Description</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Paste the job description here or describe the role requirements."
                        className="min-h-[100px] resize-none"
                        {...field}
                      />
                    </FormControl>
                    <FormDescription>
                      More details, better personalized questions.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="requirements"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Requirements</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="e.g., React, Node.js, 3+ years experience"
                        className="min-h-[80px] resize-none"
                        {...field}
                      />
                    </FormControl>
                    <FormDescription>
                      Optional: list any specific skills or requirements
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <DialogFooter className="gap-2 mt-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setOpen(false)}
                  disabled={isCreating}
                  className="cursor-pointer"
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={isCreating}
                  className="bg-primary hover:bg-primary/90 cursor-pointer"
                >
                  <Sparkles className="mr-2 h-4 w-4" />
                  Create Room
                </Button>
              </DialogFooter>
            </form>
          </Form>
        )}
      </DialogContent>
    </Dialog>
  );
}
